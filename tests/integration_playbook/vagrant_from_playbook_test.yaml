---
# This section fires up a set of guests dynamically using vagrant,
# registers it in the inventory under the group "vagrant_hosts"
# then logs in and pokes around.
#
# add_host doesn't work from roles so from "ansible-test integration"
#
# This test doesn't contribute to coverage and is only meant to show
# a working example with add_host
#
# Usage:
# ansible-playbook -i inventory/ansible/hosts vagrant-test.yaml


- hosts:
  - localhost
  connection: local
  gather_facts: False

  vars:
    ansible_python_interpreter: "/usr/bin/env python"
    box_name: debian/buster64
    vm_name: frank_from_playbook

  tasks:
  - name: Fire up a set of vagrant instances to log into
    local_action: vagrant
    args:
      command: up
      box_name: "{{box_name}}"
      vm_name: "{{vm_name}}"
      config_code: |
        config.vm.provider "virtualbox" do |vb|
        vb.memory = 256
        end
      log: true
    register: vagrant_up_results

  - name: Dump vagrant_up_results
    ansible.builtin.debug:
      msg: '{{item}}'
    loop: '{{vagrant_up_results.instances}}'

  - name: Capture that hosts contact info into the inventory (the hostname is a unique ID from Vagrant ... )
    ansible.builtin.add_host:
      groupname: vagrant_hosts
      hostname: '{{item.vagrant_name}}'
      ansible_ssh_port: '{{item.port}}'
      ansible_ssh_host: '{{item.public_ip}}'
      ansible_ssh_private_key_file: '{{item.key}}'
      ansible_ssh_args: ' -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ' # avoids ssh key storing and fixes warnings "sftp|scp transfer mechanism failed on [127.0.0.1]"
    loop: '{{vagrant_up_results.instances}}'

# Run on the vagrant_hosts group, checking that we have basic ssh access...
- hosts:
  - vagrant_hosts
  user: vagrant
  vars:
    ansible_python_interpreter: "/usr/bin/env python"
    vm_name: frank
  gather_facts: True

  tasks:
  - name: Lets see if we can login
    command: uname -a

  - name: Generate a ./blah_ansible.vars to check for hostvars
    action: template src=test-vagrant-hostinfo.j2 dest=/tmp/localhost_ansible.vars

  - name: Take a look at the outputs ...  (Messy!)
    command: cat /tmp/localhost_ansible.vars
    register: vars_result

  - name: dbg vars_result
    ansible.builtin.debug:
      msg: "{{ vars_result }}"

  - name: cat /tmp/localhost_ansible.vars should succeed
    assert:
      that:
        - vars_result is success

  - name: Now clear everything
    local_action:
      module: vagrant
      command: clear
